name: Deploy to GitHub Pages

# mainブランチにコードがプッシュされた時、または手動で実行した時に動作します
on:
  push:
    branches:
      - main
  workflow_dispatch:

# GitHub Pagesへのデプロイに必要な権限を設定します
permissions:
  contents: read
  pages: write
  id-token: write

# 同じデプロイが同時に複数実行されるのを防ぎます
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 'deploy'という名前のジョブ（一連の処理）を定義します
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # 1. リポジトリのコードをチェックアウトします
      - name: Checkout
        uses: actions/checkout@v4

      # ★★★ 追加 ★★★
      # 2. Node.js環境をセットアップします
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # プロジェクトに合わせたバージョンを指定
          cache: 'npm' # npm, yarn, pnpm などに合わせて変更

      # ★★★ 追加 ★★★
      # 3. 依存パッケージをインストールします
      - name: Install dependencies
        run: npm install # yarn install など、お使いのパッケージマネージャに合わせて変更

      # 4. AI機能のファイル内にあるAPIキーの仮の記述を置き換えます
      - name: Replace API Key
        run: |
          if [ -f "components/AIColorModal.tsx" ]; then
            sed -i "s|process.env.API_KEY|'${{ secrets.GEMINI_API_KEY }}'|g" components/AIColorModal.tsx
          else
            echo "API Key file not found, skipping replacement."
          fi
        # secrets.GEMINI_API_KEY という名前でAPIキーをリポジトリのSettings > Secretsに保存してください

      # ★★★ 追加 ★★★
      # 5. プロジェクトをビルドします
      - name: Build
        run: npm run build # package.jsonのscriptsに合わせて変更

      # 6. GitHub Pagesの設定を読み込みます
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 7. 公開するファイルをアーティファクトとしてアップロードします
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # ★★★ 変更 ★★★
          # ビルド成果物が格納されるフォルダを指定します (例: build, dist, out)
          path: './build' 

      # 8. アップロードしたアーティファクトを使ってサイトをデプロイします
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
